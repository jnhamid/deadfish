<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="next__token_8h" kind="file" language="C++">
    <compoundname>next_token.h</compoundname>
    <includedby refid="builtin_8c" local="yes">builtin.c</includedby>
    <includedby refid="next__token_8c" local="yes">next_token.c</includedby>
    <includedby refid="pipe_8c" local="yes">pipe.c</includedby>
    <includedby refid="shell_8c" local="yes">shell.c</includedby>
    <includedby refid="ui_8c" local="yes">ui.c</includedby>
    <invincdepgraph>
      <node id="4">
        <label>pipe.c</label>
        <link refid="pipe_8c"/>
      </node>
      <node id="6">
        <label>ui.c</label>
        <link refid="ui_8c"/>
      </node>
      <node id="3">
        <label>next_token.c</label>
        <link refid="next__token_8c"/>
      </node>
      <node id="1">
        <label>next_token.h</label>
        <link refid="next__token_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>shell.c</label>
        <link refid="shell_8c"/>
      </node>
      <node id="2">
        <label>builtin.c</label>
        <link refid="builtin_8c"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="next__token_8h_1ad1c0e2e740908e5530738d6dba66c858" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* next_token</definition>
        <argsstring>(char **, const char *)</argsstring>
        <name>next_token</name>
        <param>
          <type>char **</type>
          <defname>str_ptr</defname>
        </param>
        <param>
          <type>const char *</type>
          <defname>delim</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>function that gets next token</para>
<para>Retrieves the next token from a string.</para>
<para>Parameters:<itemizedlist>
<listitem><para>str_ptr: maintains context in the string, i.e., where the next token in the string will be. If the function returns token N, then str_ptr will be updated to point to token N+1. To initialize, declare a char * that points to the string being tokenized. The pointer will be updated after each successive call to next_token.</para>
</listitem><listitem><para>delim: the set of characters to use as delimiters</para>
</listitem></itemizedlist>
</para>
<para>Returns: char pointer to the next token in the string. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="next_token.h" line="13" column="6" bodyfile="next_token.c" bodystart="39" bodyend="75" declfile="next_token.h" declline="13" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="next__token_8h_1ac46623551b983cc2232bfa06ac4c19c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* replaceWord</definition>
        <argsstring>(const char *, const char *, const char *)</argsstring>
        <name>replaceWord</name>
        <param>
          <type>const char *</type>
          <defname>s</defname>
        </param>
        <param>
          <type>const char *</type>
          <defname>oldW</defname>
        </param>
        <param>
          <type>const char *</type>
          <defname>newW</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>function that replaces a str</para>
<para>function to replace a substr (oldW) with (newW) in s </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="next_token.h" line="19" column="6" bodyfile="next_token.c" bodystart="80" bodyend="119" declfile="next_token.h" declline="19" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="next__token_8h_1aa6d5612fd36fb292ee35ec0ecd7dd372" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void execute</definition>
        <argsstring>(char *command)</argsstring>
        <name>execute</name>
        <param>
          <type>char *</type>
          <declname>command</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>function that runs jobs</para>
<para>Funciton to execute a command </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="next_token.h" line="25" column="6" bodyfile="next_token.c" bodystart="151" bodyend="222" declfile="next_token.h" declline="25" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Global stuff for next_token </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="6"><highlight class="preprocessor">#ifndef<sp/>_NEXT_TOKEN_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_NEXT_TOKEN_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="next__token_8h_1ad1c0e2e740908e5530738d6dba66c858" kindref="member">next_token</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="next__token_8h_1ac46623551b983cc2232bfa06ac4c19c5" kindref="member">replaceWord</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="next__token_8h_1aa6d5612fd36fb292ee35ec0ecd7dd372" kindref="member">execute</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="structcommand" kindref="compound">command</ref>);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="next_token.h"/>
  </compounddef>
</doxygen>
